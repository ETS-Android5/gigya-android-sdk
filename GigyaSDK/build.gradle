apply plugin: 'com.android.library'

def androidVersion = file('version.txt').text

ext {
    outDir = "${projectDir}/dist"
    androidJarName = "gigya-android-sdk-${androidVersion}"
    androidDocName = "gigya-android-sdk-${androidVersion}-javadoc"
    androidSrcName = "gigya-android-sdk-${androidVersion}-source"
    sharedManifest = manifest {
        attributes(
                'Implementation-Vendor': 'SAP Gigya INC.',
                'Implementation-Title': 'Gigya Android SDK',
                'Implementation-Version': androidVersion
        )
    }
}

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        //noinspection MinSdkTooLow
        minSdkVersion build_versions.min_sdk_biometric
        targetSdkVersion build_versions.target_sdk

        archivesBaseName = "gigya-android-sdk-${androidVersion}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {

        debug {
            //testCoverageEnabled true
            debuggable true
        }

        release {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
}

configurations {
    extraLibs
}

dependencies {

    // Test implementations.
    testImplementation deps.test.junit
    testImplementation deps.test.json
    testImplementation deps.androidx.test_core
    testImplementation deps.mockito.core
    testImplementation deps.power_mock.junit4
    testImplementation deps.power_mock.mockito2
    testImplementation deps.apache.http_components
    testImplementation deps.apache.http_client

    // Implementations.
    //noinspection GradleDependency
    implementation deps.android_support.appcompat
    implementation deps.libs.gson

    // Extra libraries included in fat JAR file.
    extraLibs deps.libs.gson

    // Compile only libraries. Not included in packaged JAR file.
    compileOnly files('libs/line-sdk-4.0.10.aar')
    compileOnly deps.libs.facebook
    compileOnly deps.libs.google_auth
    compileOnly deps.libs.wechat
    compileOnly deps.libs.volley
}

// Task for building release Jar/sources/JavaDocs.
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name == 'release') {

        task createOutputDirs() {
            file(outDir).mkdir()
        }
        createOutputDirs.outputs.dir files(
                file(outDir),
                buildDir
        )
        task removeOutputDirs() {
            delete outDir, buildDir
        }

        task createAndroidJar(type: Jar, dependsOn: variant.javaCompileProvider) {
            baseName androidJarName
            from variant.javaCompileProvider.get().destinationDir
            from { configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) } }
            destinationDir = file(outDir)
            include(
                    'com/gigya/android/sdk/**',
                    'com/google/gson/**'
            )
            manifest {
                from sharedManifest
            }
        }

        task createAndroidJavadoc(type: Javadoc) {
            source = project.android.sourceSets.main.java.srcDirs
            options.linkSource true
            configurations.implementation.setCanBeResolved(true)
            configurations.compileOnly.setCanBeResolved(true)
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += configurations.implementation
            classpath += configurations.compileOnly
            destinationDir = new File("${outDir}/${androidDocName}")
            include(
                    'com/gigya/android/sdk/Gigya.java',
                    'com/gigya/android/sdk/GigyaCallback.java',
                    'com/gigya/android/sdk/GigyaLoginCallback.java',
                    'com/gigya/android/sdk/GigyaPluginCallback.java',
                    'com/gigya/android/sdk/model/*.java',
                    'com/gigya/android/sdk/model/account/*.java',
                    'com/gigya/android/sdk/model/profile/*.java',
                    'com/gigya/android/sdk/model/tfa/*.java',
            )
            failOnError = false
        }

        task createAndroidSrc(type: Copy, dependsOn: variant.javaCompileProvider) {
            from 'src'
            def sourceDir = new File("${outDir}/${androidSrcName}")
            sourceDir.mkdir()
            into sourceDir
        }

        task createPropertiesFile(dependsOn: [createAndroidJar, createAndroidJavadoc, createAndroidSrc]) {
            File propertiesFile = new File("${outDir}/${androidJarName}.jar.properties")
            doLast {
                propertiesFile.text = "src=${androidSrcName}\n"
                propertiesFile.text += "doc=${androidDocName}"
            }
        }

        task release(dependsOn: createPropertiesFile) {
            println 'Release: Done'
        }
    }
}
