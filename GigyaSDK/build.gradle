apply plugin: 'com.android.library'

def androidVersion = file('version.txt').text

ext {
    outDir = "${projectDir}/dist"
    androidJarName = "gigya-sdk-${androidVersion}"
    androidDocName = "gigya-sdk-${androidVersion}-javadoc"
    androidSrcName = "gigya-sdk-${androidVersion}-source"
    sharedManifest = manifest {
        attributes(
                'Implementation-Vendor': 'Gigya inc.',
                'Implementation-Title': 'Gigya Android SDK',
                'Implementation-Version': androidVersion
        )
    }
}

android {

    compileSdkVersion 27

    defaultConfig {
        //noinspection MinSdkTooLow
        minSdkVersion 14
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {

        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
}

configurations {
    extraLibs
}

dependencies {

    // Test implementations.
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20141113'
    testImplementation 'androidx.test:core:1.1.0'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.apache.httpcomponents:httpcore:4.4.10'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.6'

    // Implementations.
    //noinspection GradleDependency
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'

    // Extra libraries included in packaged JAR file.
    extraLibs 'com.google.code.gson:gson:2.8.5'

    // Compile only libraries. Not included in packaged JAR file.
    compileOnly files('libs/line-sdk-4.0.10.aar')
    compileOnly 'com.facebook.android:facebook-android-sdk:4.41.0'
    compileOnly 'com.google.android.gms:play-services-auth:16.0.1'
    compileOnly 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.3.1'
    compileOnly 'com.android.volley:volley:1.1.1'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name == 'release') {

        task createOutputDirs() {
            file(outDir).mkdir()
        }
        createOutputDirs.outputs.dir files(
                file(outDir),
                buildDir
        )
        task removeOutputDirs() {
            delete outDir, buildDir
        }

        task createAndroidJar(type: Jar, dependsOn: variant.javaCompileProvider) {
            baseName androidJarName
            from variant.javaCompileProvider.get().destinationDir
            from { configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) } }
            destinationDir = file(outDir)
            include(
                    'com/gigya/android/sdk/**',
                    'com/google/gson/**'
            )
            manifest {
                from sharedManifest
            }

        }

        task createAndroidJavadoc(type: Javadoc, dependsOn: variant.javaCompileProvider) {
            source = variant.javaCompileProvider.get().source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            destinationDir = new File("${outDir}/${androidDocName}")
            include()
            failOnError = false
        }

        task createAndroidSrc(type: Copy, dependsOn: variant.javaCompileProvider) {
            from 'src'
            def sourceDir = new File("${outDir}/${androidSrcName}")
            sourceDir.mkdir()
            into sourceDir
        }

        task createPropertiesFile(dependsOn: [createAndroidJar, createAndroidJavadoc, createAndroidSrc]) {
            File propertiesFile = new File("${outDir}/${androidJarName}.jar.properties")
            doLast {
                propertiesFile.text = "src=${androidSrcName}\n"
                propertiesFile.text += "doc=${androidDocName}"
            }
        }

        task release(dependsOn: createPropertiesFile) {
            println 'Release: Done'
        }
    }
}
