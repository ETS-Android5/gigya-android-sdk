apply plugin: 'com.android.library'

def androidVersion = file('version.txt').text

ext {
    outDir = "${projectDir}/dist"
    androidJarName = "gigya-android-sdk-tfa${androidVersion}"
    androidDocName = "gigya-android-sdk-tfa${androidVersion}-javadoc"
    androidSrcName = "gigya-android-sdk-tfa${androidVersion}-source"
    sharedManifest = manifest {
        attributes(
                'Implementation-Vendor': 'SAP Gigya INC.',
                'Implementation-Title': 'Gigya Android SDK',
                'Implementation-Version': androidVersion
        )
    }
}

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk_tfa
        targetSdkVersion build_versions.target_sdk
        archivesBaseName = "gigya-android-tfa-${androidVersion}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {

        debug {
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    // Test implementations.
    testImplementation deps.test.junit
    testImplementation deps.test.json
    testImplementation deps.androidx.test_core
    testImplementation deps.mockito.core
    testImplementation deps.power_mock.junit4
    testImplementation deps.power_mock.mockito2
    testImplementation project(path: ':GigyaSDK')

    implementation deps.android_support.appcompat
    implementation deps.libs.gson

    compileOnly project(path: ':GigyaSDK')

    implementation deps.firebase.messaging
}

// Task for building release Jar/sources/JavaDocs.
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name == 'release') {

        task createOutputDirs() {
            file(outDir).mkdir()
        }
        createOutputDirs.outputs.dir files(
                file(outDir),
                buildDir
        )
        task removeOutputDirs() {
            delete outDir, buildDir
        }

        task createAndroidJar(type: Jar, dependsOn: variant.javaCompileProvider) {
            baseName androidJarName
            from variant.javaCompileProvider.get().destinationDir
            destinationDir = file(outDir)
            include(
                    'com/gigya/android/sdk/**'
            )
            manifest {
                from sharedManifest
            }
        }

        task createAndroidJavadoc(type: Javadoc) {
            source = project.android.sourceSets.main.java.srcDirs
            options.linkSource true
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            destinationDir = new File("${outDir}/${androidDocName}")
            include(
                    'com/gigya/android/sdk/tfa/*.java',
                    'com/gigya/android/sdk/tfa/ui/*.java',
                    'com/gigya/android/sdk/tfa/ui/models/*.java',
                    'com/gigya/android/sdk/tfa/resolvers/*.java.java',
                    'com/gigya/android/sdk/tfa/resolvers/email/*.java',
                    'com/gigya/android/sdk/tfa/resolvers/phone/*.java',
                    'com/gigya/android/sdk/tfa/resolvers/totp/*.java',
                    'com/gigya/android/sdk/tfa/push/*.java',
                    'com/gigya/android/sdk/tfa/push/firebase/*.java',
                    'com/gigya/android/sdk/tfa/persistence/*.java',
                    'com/gigya/android/sdk/tfa/models/*.java',
                    'com/gigya/android/sdk/tfa/api/*.java'
            )
            failOnError = false
        }

        task createAndroidSrc(type: Copy, dependsOn: variant.javaCompileProvider) {
            from 'src'
            def sourceDir = new File("${outDir}/${androidSrcName}")
            sourceDir.mkdir()
            into sourceDir
        }

        task createPropertiesFile(dependsOn: [createAndroidJar, createAndroidJavadoc, createAndroidSrc]) {
            File propertiesFile = new File("${outDir}/${androidJarName}.jar.properties")
            doLast {
                propertiesFile.text = "src=${androidSrcName}\n"
                propertiesFile.text += "doc=${androidDocName}"
            }
        }

        task release(dependsOn: createPropertiesFile) {
            println 'Release: Done'
        }
    }
}
